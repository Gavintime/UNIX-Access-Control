#!/usr/bin/env python3

import sys
from typing import List, Dict, Set
from dataclasses import dataclass

class AccessController():

    @dataclass
    class FileAC:
        owner: str
        group: str
        permissions: str = "rw-------"

    def __init__(self):

        self._current_user: str                 = None
        self._root_created: bool                = False
        self._groups: Dict[str, Set[str]]       = {}
        self._file_ACL: Dict[str, self.FileAC]  = {}
        self._audit_fname: str                  = "audit.txt"
        self._accounts_fname: str               = "accounts.txt"

        # create special files (overwrite)
        try:
            with open(self._accounts_fname, 'w'):
                pass
            with open(self._audit_fname, 'w'):
                pass
        except IOError:
            sys.exit("IO Error: Unable to create special files, exiting...")

    # add given user, erroring if user already exists
    def useradd(self, username: str, password: str):

        # make sure root is the first user created
        if not self._root_created and username != 'root':
            self._log("Error: First command must create root user.")
            return

        # only allow command while logged out if root not made yet
        if self._root_created and self._current_user is None:
            self._log("Error: You Must be logged in to run useradd.")
            return

        if len(username) > 30:
            self._log("Username cannot exceed 30 characters.")
            return

        if len(password) > 30:
            self._log("Password cannot exceed 30 characters.")
            return

        # make sure user doesn't exist yet
        if self._user_exists(username):
            self._log(f"Error: User {username} already exists.")
            return

        if '/' in username or ':' in username:
            self._log("Username cannot contain a forward slash (/) or colon (:).")
            return

        # add user to accounts file
        try:
            with open(self._accounts_fname, 'a') as accounts_file:
                accounts_file.write(f"{username} {password}\n")
        except IOError:
            self._log("IO Error: Unable to add user to accounts file.")
            return

        if username == 'root':
            self._root_created = True
        self._log(f"User {username} created")

    def login(self, username: str, password: str):

        # don't login if someone is already logged in
        if self._current_user is not None:
            self._log("Error: Cannot login, a user is currently logged in")
            return

        # read in usernames and passwords
        user_info = []
        try:
            with open(self._accounts_fname, 'r') as accounts_file:
                for line in accounts_file:
                    user_info.append(line.split()[0:2])
        except IOError:
            self._log("IO Error: Unable to read accounts file.")
            return

        if [username, password] in user_info:
            self._current_user = username
            self._log(f"User {username} logged in")
        else:
            self._log("Username or password is incorrect. Login Failed.")

    def logout(self):

        if self._current_user is None:
            self._log("Not currently logged in.")
            return

        self._log(f"User {self._current_user} logged out")
        self._current_user = None

    def groupadd(self, groupname: str):

        # auth checking
        if self._current_user != 'root':
            self._log("Only root can run this command.")
            return

        if len(groupname) > 30:
            self._log("Groupname cannot exceed 30 characters.")
            return

        if groupname == 'nil':
            self._log("The name nil is not a valid groupname.")
            return

        if '/' in groupname or ':' in groupname:
            self._log("Groupname cannot contain a forward slash (/) or colon (:).")
            return

        # check if group exists
        if groupname in self._groups:
            self._log(f"Group {groupname} already exists.")
            return

        # create empty group
        self._groups[groupname] = set()
        self._log(f"Group {groupname} created")

    def usergrp(self, username: str, groupname: str):

        # auth checking
        if self._current_user != 'root':
            self._log("Only root can run this command.")
            return

        # Input checking
        if not self._user_exists(username):
            self._log(f"User {username} does not exist.")
            return
        if groupname not in self._groups:
            self._log(f"Group {groupname} does not exist.")
            return

        self._groups[groupname].add(username)
        self._log(f"User {username} added to group {groupname}")

    def chgrp(self, filename: str, groupname: str):

        if self._current_user is None:
            self._log("You must be logged in to run this command.")
            return

        if filename not in self._file_ACL:
            self._log(f"File {filename} does not exist.")
            return

        if self._current_user not in (self._file_ACL[filename].owner, 'root'):
            self._log("You do not have permission to run this command.")
            return

        if groupname not in self._groups and groupname != 'nil':
            self._log(f"Group {groupname} does not exist.")
            return

        if self._current_user != 'root' and self._current_user not in self._groups[groupname]:
            self._log(f"You must be a member of {groupname} to run this command.")
            return

        self._file_ACL[filename].group = groupname
        self._log(f"Group for {filename} set to {groupname} by {self._current_user}")

    def mkfile(self, filename: str):

        if self._current_user is None:
            self._log("You must be logged in to run this command.")
            return

        if len(filename) > 30:
            self._log("Filename cannot exceed 30 characters.")
            return

        if '/' in filename or ':' in filename:
            self._log("Filename cannot contain a forward slash (/) or colon (:).")
            return

        if filename in self._file_ACL:
            self._log(f"File {filename} already exists.")
            return

        # create file (overwrite)
        try:
            with open(filename, 'w'):
                pass
        except IOError:
            self._log(f"IO Error: Unable to create {filename}.")
            return

        # create ACL entry
        new_file = self.FileAC(owner=self._current_user, group='nil')
        self._file_ACL[filename] = new_file
        self._log(f"File {filename} with owner {self._current_user} and default permissions created")

    def write(self, filename: str, text: str):

        if self._current_user is None:
            self._log("You must be logged in to run this command.")
            return

        if filename not in self._file_ACL:
            self._log(f"File {filename} does not exist.")
            return

        access_granted = False

        # allow writing if user is owner and file has write access for owner
        if self._current_user == self._file_ACL[filename].owner:
            if self._file_ACL[filename].permissions[1] == 'w':
                access_granted = True

        # allow access if user is not owner, is a member of group associated
        # with file, and write access is given for the group
        elif (self._file_ACL[filename].group != 'nil' and
              self._current_user in self._groups[self._file_ACL[filename].group]):
              if self._file_ACL[filename].permissions[4] == 'w':
                  access_granted = True

        # grant access if user is not the owner, not a member of the group
        # for file, and write access has been granted for others
        elif self._file_ACL[filename].permissions[7] == 'w':
            access_granted = True

        if self._current_user == 'root':
            access_granted = True

        if not access_granted:
            self._log("You do not have permission to run this command.")
            return

        # Write to file (append)
        try:
            with open(filename, 'a') as file:
                file.write(text + '\n')
        except IOError:
            self._log(f"IO Error: Unable to write to {filename}.")
            return
        self._log(f"User {self._current_user} wrote to {filename}: {text}")

    def chmod(self, filename:str, p_owner: str, p_group: str, p_other: str):

        if self._current_user is None:
            self._log("You must be logged in to run this command.")
            return

        if filename not in self._file_ACL:
            self._log(f"File {filename} does not exist.")
            return

        if self._current_user not in (self._file_ACL[filename].owner, 'root'):
            self._log("You do not have permission to run this command.")
            return

        self._file_ACL[filename].permissions = p_owner + p_group + p_other
        self._log(f"Permissions for {filename} set to {p_owner} {p_group} {p_other} by {self._current_user}")

    # logs to stdout and audit.txt
    def _log(self, message: str):

        print(message)
        try:
            with open(self._audit_fname, 'a') as audit_file:
                audit_file.write(message + '\n')
        except IOError:
            sys.exit("Unable append log to audit.txt, exiting...")

    # returns true if user is present, false otherwise
    # helper function for useradd
    def _user_exists(self, username: str) -> bool:

        usernames = []
        # read in user info
        try:
            with open(self._accounts_fname, 'r') as accounts_file:
                for line in accounts_file:
                    usernames.append(line.split()[0])
        except IOError:
            self._log("IO Error: Unable to read accounts file.")
            return True

        return username in usernames


# return list of instructions from given file
# instructions are in the form of a list of words
def read_instruction_file(filename: str) -> List[List[str]]:

    instructions = []
    # read in instructions, removing newline char
    try:
        with open(filename, 'r') as instruction_file:
            for line in instruction_file:
                instructions.append(line[:-1].split())
        return instructions
    except IOError:
        sys.exit("Unable to open instruction file, exiting...")


# reads the instruction file and parses commands to be sent to the Access Controller
def main():

    # get instructions
    if len(sys.argv) != 2:
        sys.exit("Wrong number of arguments, expecting a single filename, exiting...")
    filename = sys.argv[1]
    instructions = read_instruction_file(filename)

    # create Access Control manager
    acm = AccessController()

    # Start processing instructions
    for inst in instructions:

        if inst[0] == 'useradd':
            acm.useradd(inst[1], inst[2])

        elif inst[0] == 'login':
            acm.login(inst[1], inst[2])

        elif inst[0] == 'logout':
            acm.logout()

        elif inst[0] == 'groupadd':
            acm.groupadd(inst[1])

        elif inst[0] == 'usergrp':
            acm.usergrp(inst[1], inst[2])

        elif inst[0] == 'mkfile':
            acm.mkfile(inst[1])

        elif inst[0] == 'chmod':
            acm.chmod(inst[1], inst[2], inst[3], inst[4])

        elif inst[0] == 'chown':
            acm.chown(inst[1], inst[2])

        elif inst[0] == 'chgrp':
            acm.chgrp(inst[1], inst[2])

        elif inst[0] == 'read':
            acm.read(inst[1])

        elif inst[0] == 'write':
            acm.write(inst[1], ' '.join(inst[2:]))

        elif inst[0] == 'execute':
            acm.execute(inst[1])

        elif inst[0] == 'ls':
            acm.ls(inst[1])

        elif inst[0] == 'end':
            acm.end()

        # command does not exist
        else:
            pass


if __name__ == '__main__':
    main()
