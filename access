#!/usr/bin/env python3

import sys
from typing import List

# return list of instructions from given file
def read_instruction_file(filename: str) -> List[str]:

    instructions = []
    # read in instructions, removing newline char
    try:
        with open(filename, 'r') as instruction_file:
            for line in instruction_file:
                instructions.append(line[:-1])
        return instructions
    except IOError:
        sys.exit("Unable to open instruction file, exiting...")

# logs to stdout and audit.txt
def log(message: str) -> None:

    print(message)
    try:
        with open('audit.txt', 'a') as audit_file:
            audit_file.write(message)
    except IOError:
        sys.exit("Unable append log to audit.txt, exiting...")

# returns true if user is present, false otherwise
# helper function for useradd
def user_exists(username: str) -> bool:

    usernames = []
    # read in user info
    try:
        with open('accounts.txt', 'r') as accounts_file:
            for line in accounts_file:
                usernames.append(line.split()[0])
    except IOError:
        sys.exit("Error: Unable to read accounts file, exiting...")

    return username in usernames

# add given user, erroring if user already exists
def useradd(username: str, password: str) -> bool:

    # make sure user doesn't exist yet
    if user_exists(username):
        log(f"Error: User {username} already exists.")
        return False

    # add user to accounts file
    try:
        with open('accounts.txt', 'a') as accounts_file:
            accounts_file.write(f"{username} {password}")
    except IOError:
        sys.exit("Error: Unable to add user to accounts file, exiting...")

    log(f"User {username} created")
    return True

def login(username: str, password: str) -> None:

    user_info = []
    # read in usernames and passwords
    try:
        with open('accounts.txt', 'r') as accounts_file:
            for line in accounts_file:
                user_info.append(line.split()[0:2])
    except IOError:
        sys.exit("Error: Unable to read accounts file, exiting...")

    if [username, password] in user_info:
        log(f"User {username} logged in")
    else:
        log("Username or password is incorrect")


def main():

    # get instructions
    if len(sys.argv) != 2:
        sys.exit("Wrong number of arguments, expecting a single filename, exiting...")
    filename = sys.argv[1]
    instructions = read_instruction_file(filename)


    # create accounts and audit file (overwrite)
    try:
        with open('accounts.txt', 'w'):
            pass
        with open('audit.txt', 'w'):
            pass
    except IOError:
        sys.exit("Unable to create special files, exiting...")


    # process first command, should be creating user root
    first_instruction = instructions[0].split()
    if len(first_instruction) == 3 and first_instruction[0:2] == ['useradd', 'root']:
        useradd(first_instruction[1], first_instruction[2])
    else:
        log("Error: First command must add user root with password, exiting...")
        sys.exit(1)


    # process second command, should be logging in as root
    second_instruction = instructions[1].split()
    if len(second_instruction) == 3 and second_instruction[0:2] == ['login', 'root']:
        login(second_instruction[1], second_instruction[2])
    else:
        log("Error: Second command must login to root, exiting...")
        sys.exit(1)


if __name__ == '__main__':
    main()
